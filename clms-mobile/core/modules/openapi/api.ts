/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface Assignment
 */
export interface Assignment {
    /**
     * 
     * @type {number}
     * @memberof Assignment
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Assignment
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Assignment
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof Assignment
     */
    'startDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof Assignment
     */
    'dueDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof Assignment
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Assignment
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {Array<AssignmentQuestion>}
     * @memberof Assignment
     */
    'questions'?: Array<AssignmentQuestion>;
    /**
     * 
     * @type {Course}
     * @memberof Assignment
     */
    'course'?: Course;
    /**
     * 
     * @type {number}
     * @memberof Assignment
     */
    'maxAttempts'?: number;
    /**
     * 
     * @type {number}
     * @memberof Assignment
     */
    'timeLimitMinutes'?: number;
}
/**
 * 
 * @export
 * @interface AssignmentAttemptProjection
 */
export interface AssignmentAttemptProjection {
    /**
     * 
     * @type {string}
     * @memberof AssignmentAttemptProjection
     */
    'id'?: string;
    /**
     * 
     * @type {AssignmentProjection}
     * @memberof AssignmentAttemptProjection
     */
    'assignment'?: AssignmentProjection;
    /**
     * 
     * @type {UserProjection}
     * @memberof AssignmentAttemptProjection
     */
    'user'?: UserProjection;
    /**
     * 
     * @type {string}
     * @memberof AssignmentAttemptProjection
     */
    'status'?: AssignmentAttemptProjectionStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof AssignmentAttemptProjection
     */
    'startedAt'?: string;
    /**
     * 
     * @type {Array<AttemptQuestionAnswerProjection>}
     * @memberof AssignmentAttemptProjection
     */
    'answers'?: Array<AttemptQuestionAnswerProjection>;
    /**
     * 
     * @type {number}
     * @memberof AssignmentAttemptProjection
     */
    'scorePercentage'?: number;
    /**
     * 
     * @type {number}
     * @memberof AssignmentAttemptProjection
     */
    'answersCorrect'?: number;
}

export const AssignmentAttemptProjectionStatusEnum = {
    InProgress: 'IN_PROGRESS',
    Submitted: 'SUBMITTED'
} as const;

export type AssignmentAttemptProjectionStatusEnum = typeof AssignmentAttemptProjectionStatusEnum[keyof typeof AssignmentAttemptProjectionStatusEnum];

/**
 * 
 * @export
 * @interface AssignmentDetailsProjection
 */
export interface AssignmentDetailsProjection {
    /**
     * 
     * @type {number}
     * @memberof AssignmentDetailsProjection
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof AssignmentDetailsProjection
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof AssignmentDetailsProjection
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof AssignmentDetailsProjection
     */
    'dueDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof AssignmentDetailsProjection
     */
    'startDate'?: string;
}
/**
 * 
 * @export
 * @interface AssignmentEditDetailsProjection
 */
export interface AssignmentEditDetailsProjection {
    /**
     * 
     * @type {number}
     * @memberof AssignmentEditDetailsProjection
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof AssignmentEditDetailsProjection
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof AssignmentEditDetailsProjection
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof AssignmentEditDetailsProjection
     */
    'dueDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof AssignmentEditDetailsProjection
     */
    'startDate'?: string;
    /**
     * 
     * @type {CourseDetailsProjection}
     * @memberof AssignmentEditDetailsProjection
     */
    'course'?: CourseDetailsProjection;
    /**
     * 
     * @type {number}
     * @memberof AssignmentEditDetailsProjection
     */
    'maxAttempts'?: number;
    /**
     * 
     * @type {number}
     * @memberof AssignmentEditDetailsProjection
     */
    'timeLimitMinutes'?: number;
    /**
     * 
     * @type {Array<AssignmentQuestion>}
     * @memberof AssignmentEditDetailsProjection
     */
    'questions'?: Array<AssignmentQuestion>;
}
/**
 * 
 * @export
 * @interface AssignmentProjection
 */
export interface AssignmentProjection {
    /**
     * 
     * @type {number}
     * @memberof AssignmentProjection
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof AssignmentProjection
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof AssignmentProjection
     */
    'description'?: string;
    /**
     * 
     * @type {Array<AssignmentQuestionProjection>}
     * @memberof AssignmentProjection
     */
    'questions'?: Array<AssignmentQuestionProjection>;
    /**
     * 
     * @type {CourseProjection}
     * @memberof AssignmentProjection
     */
    'course'?: CourseProjection;
    /**
     * 
     * @type {number}
     * @memberof AssignmentProjection
     */
    'maxAttempts'?: number;
    /**
     * 
     * @type {number}
     * @memberof AssignmentProjection
     */
    'timeLimitMinutes'?: number;
    /**
     * 
     * @type {string}
     * @memberof AssignmentProjection
     */
    'startDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof AssignmentProjection
     */
    'dueDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof AssignmentProjection
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof AssignmentProjection
     */
    'updatedAt'?: string;
}
/**
 * 
 * @export
 * @interface AssignmentQuestion
 */
export interface AssignmentQuestion {
    /**
     * 
     * @type {number}
     * @memberof AssignmentQuestion
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof AssignmentQuestion
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof AssignmentQuestion
     */
    'question'?: string;
    /**
     * 
     * @type {string}
     * @memberof AssignmentQuestion
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof AssignmentQuestion
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof AssignmentQuestion
     */
    'questionType'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof AssignmentQuestion
     */
    'keepAnswersOrdered'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof AssignmentQuestion
     */
    'order'?: number;
    /**
     * 
     * @type {Array<AssignmentQuestionAnswer>}
     * @memberof AssignmentQuestion
     */
    'answers'?: Array<AssignmentQuestionAnswer>;
}
/**
 * 
 * @export
 * @interface AssignmentQuestionAnswer
 */
export interface AssignmentQuestionAnswer {
    /**
     * 
     * @type {string}
     * @memberof AssignmentQuestionAnswer
     */
    'id'?: string;
    /**
     * 
     * @type {number}
     * @memberof AssignmentQuestionAnswer
     */
    'order'?: number;
    /**
     * 
     * @type {string}
     * @memberof AssignmentQuestionAnswer
     */
    'text'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof AssignmentQuestionAnswer
     */
    'correct'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof AssignmentQuestionAnswer
     */
    'isCorrect'?: boolean;
}
/**
 * 
 * @export
 * @interface AssignmentQuestionAnswerProjection
 */
export interface AssignmentQuestionAnswerProjection {
    /**
     * 
     * @type {string}
     * @memberof AssignmentQuestionAnswerProjection
     */
    'id'?: string;
    /**
     * 
     * @type {number}
     * @memberof AssignmentQuestionAnswerProjection
     */
    'order'?: number;
    /**
     * 
     * @type {string}
     * @memberof AssignmentQuestionAnswerProjection
     */
    'text'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof AssignmentQuestionAnswerProjection
     */
    'isCorrect'?: boolean;
}
/**
 * 
 * @export
 * @interface AssignmentQuestionProjection
 */
export interface AssignmentQuestionProjection {
    /**
     * 
     * @type {number}
     * @memberof AssignmentQuestionProjection
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof AssignmentQuestionProjection
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof AssignmentQuestionProjection
     */
    'question'?: string;
    /**
     * 
     * @type {string}
     * @memberof AssignmentQuestionProjection
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof AssignmentQuestionProjection
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof AssignmentQuestionProjection
     */
    'questionType'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof AssignmentQuestionProjection
     */
    'keepAnswersOrdered'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof AssignmentQuestionProjection
     */
    'order'?: number;
    /**
     * 
     * @type {Array<AssignmentQuestionAnswerProjection>}
     * @memberof AssignmentQuestionProjection
     */
    'answers'?: Array<AssignmentQuestionAnswerProjection>;
}
/**
 * 
 * @export
 * @interface AssignmentQuestionRequest
 */
export interface AssignmentQuestionRequest {
    /**
     * 
     * @type {number}
     * @memberof AssignmentQuestionRequest
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof AssignmentQuestionRequest
     */
    'question'?: string;
    /**
     * 
     * @type {string}
     * @memberof AssignmentQuestionRequest
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof AssignmentQuestionRequest
     */
    'questionType'?: string;
    /**
     * 
     * @type {Array<AssignmentQuestionAnswer>}
     * @memberof AssignmentQuestionRequest
     */
    'answers'?: Array<AssignmentQuestionAnswer>;
    /**
     * 
     * @type {string}
     * @memberof AssignmentQuestionRequest
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof AssignmentQuestionRequest
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof AssignmentQuestionRequest
     */
    'keepAnswersOrdered'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof AssignmentQuestionRequest
     */
    'assignmentId'?: number;
    /**
     * 
     * @type {number}
     * @memberof AssignmentQuestionRequest
     */
    'order'?: number;
}
/**
 * 
 * @export
 * @interface AssignmentQuestionUpdateRequest
 */
export interface AssignmentQuestionUpdateRequest {
    /**
     * 
     * @type {number}
     * @memberof AssignmentQuestionUpdateRequest
     */
    'questionId'?: number;
    /**
     * 
     * @type {string}
     * @memberof AssignmentQuestionUpdateRequest
     */
    'selectedAnswerId'?: string;
    /**
     * 
     * @type {number}
     * @memberof AssignmentQuestionUpdateRequest
     */
    'assignmentId'?: number;
}
/**
 * 
 * @export
 * @interface AttemptQuestionAnswerProjection
 */
export interface AttemptQuestionAnswerProjection {
    /**
     * 
     * @type {number}
     * @memberof AttemptQuestionAnswerProjection
     */
    'questionId'?: number;
    /**
     * 
     * @type {string}
     * @memberof AttemptQuestionAnswerProjection
     */
    'selectedAnswerId'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof AttemptQuestionAnswerProjection
     */
    'selectedAnswerCorrect'?: boolean;
}
/**
 * 
 * @export
 * @interface Course
 */
export interface Course {
    /**
     * 
     * @type {number}
     * @memberof Course
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Course
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Course
     */
    'description'?: string;
    /**
     * 
     * @type {Array<User>}
     * @memberof Course
     */
    'members'?: Array<User>;
    /**
     * 
     * @type {Array<Assignment>}
     * @memberof Course
     */
    'assignments'?: Array<Assignment>;
}
/**
 * 
 * @export
 * @interface CourseCreationDto
 */
export interface CourseCreationDto {
    /**
     * 
     * @type {string}
     * @memberof CourseCreationDto
     */
    'courseName'?: string;
    /**
     * 
     * @type {string}
     * @memberof CourseCreationDto
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface CourseDetailsProjection
 */
export interface CourseDetailsProjection {
    /**
     * 
     * @type {number}
     * @memberof CourseDetailsProjection
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CourseDetailsProjection
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof CourseDetailsProjection
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface CourseProjection
 */
export interface CourseProjection {
    /**
     * 
     * @type {number}
     * @memberof CourseProjection
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CourseProjection
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof CourseProjection
     */
    'description'?: string;
    /**
     * 
     * @type {Array<User>}
     * @memberof CourseProjection
     */
    'members'?: Array<User>;
    /**
     * 
     * @type {Array<Assignment>}
     * @memberof CourseProjection
     */
    'assignments'?: Array<Assignment>;
}
/**
 * 
 * @export
 * @interface LoginRequestDTO
 */
export interface LoginRequestDTO {
    /**
     * 
     * @type {string}
     * @memberof LoginRequestDTO
     */
    'username'?: string;
    /**
     * 
     * @type {string}
     * @memberof LoginRequestDTO
     */
    'password'?: string;
}
/**
 * 
 * @export
 * @interface LoginResponseDTO
 */
export interface LoginResponseDTO {
    /**
     * 
     * @type {string}
     * @memberof LoginResponseDTO
     */
    'accessToken'?: string;
    /**
     * 
     * @type {UserProjection}
     * @memberof LoginResponseDTO
     */
    'user'?: UserProjection;
}
/**
 * 
 * @export
 * @interface NewUserRequest
 */
export interface NewUserRequest {
    /**
     * 
     * @type {string}
     * @memberof NewUserRequest
     */
    'username'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewUserRequest
     */
    'password'?: string;
}
/**
 * 
 * @export
 * @interface Permission
 */
export interface Permission {
    /**
     * 
     * @type {number}
     * @memberof Permission
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Permission
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Permission
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface QuestionBankCategory
 */
export interface QuestionBankCategory {
    /**
     * 
     * @type {number}
     * @memberof QuestionBankCategory
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof QuestionBankCategory
     */
    'categoryName'?: string;
}
/**
 * 
 * @export
 * @interface QuestionBankQuestion
 */
export interface QuestionBankQuestion {
    /**
     * 
     * @type {number}
     * @memberof QuestionBankQuestion
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof QuestionBankQuestion
     */
    'questionName'?: string;
    /**
     * 
     * @type {Array<QuestionBankCategory>}
     * @memberof QuestionBankQuestion
     */
    'categories'?: Array<QuestionBankCategory>;
}
/**
 * 
 * @export
 * @interface QuestionsFromYoutubeVideoRequest
 */
export interface QuestionsFromYoutubeVideoRequest {
    /**
     * 
     * @type {string}
     * @memberof QuestionsFromYoutubeVideoRequest
     */
    'videoUrl'?: string;
}
/**
 * 
 * @export
 * @interface RegistrationDTO
 */
export interface RegistrationDTO {
    /**
     * 
     * @type {string}
     * @memberof RegistrationDTO
     */
    'username'?: string;
    /**
     * 
     * @type {string}
     * @memberof RegistrationDTO
     */
    'password'?: string;
}
/**
 * 
 * @export
 * @interface Role
 */
export interface Role {
    /**
     * 
     * @type {number}
     * @memberof Role
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Role
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Role
     */
    'description'?: string;
    /**
     * 
     * @type {Set<Permission>}
     * @memberof Role
     */
    'permissions'?: Set<Permission>;
}
/**
 * 
 * @export
 * @interface StartAssignmentAttemptRequest
 */
export interface StartAssignmentAttemptRequest {
    /**
     * 
     * @type {number}
     * @memberof StartAssignmentAttemptRequest
     */
    'assignmentId'?: number;
}
/**
 * 
 * @export
 * @interface SubmitAssignmentAttemptRequest
 */
export interface SubmitAssignmentAttemptRequest {
    /**
     * 
     * @type {number}
     * @memberof SubmitAssignmentAttemptRequest
     */
    'assignmentId'?: number;
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {number}
     * @memberof User
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof User
     */
    'authenticationProfileId'?: number;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'firstName'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'lastName'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'username'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'dateOfBirth'?: string;
    /**
     * 
     * @type {Set<Role>}
     * @memberof User
     */
    'roles'?: Set<Role>;
    /**
     * 
     * @type {Set<Permission>}
     * @memberof User
     */
    'permissions'?: Set<Permission>;
}
/**
 * 
 * @export
 * @interface UserProjection
 */
export interface UserProjection {
    /**
     * 
     * @type {number}
     * @memberof UserProjection
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof UserProjection
     */
    'username'?: string;
    /**
     * 
     * @type {Set<Role>}
     * @memberof UserProjection
     */
    'roles'?: Set<Role>;
    /**
     * 
     * @type {Set<Permission>}
     * @memberof UserProjection
     */
    'permissions'?: Set<Permission>;
}

/**
 * AdminApi - axios parameter creator
 * @export
 */
export const AdminApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {Role} role 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRole: async (role: Role, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'role' is not null or undefined
            assertParamExists('createRole', 'role', role)
            const localVarPath = `/api/admin/authorization/roles/createRole`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(role, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewUserRequest} newUserRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser: async (newUserRequest: NewUserRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'newUserRequest' is not null or undefined
            assertParamExists('createUser', 'newUserRequest', newUserRequest)
            const localVarPath = `/api/admin/users/createUser`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newUserRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/admin/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {Role} role 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRole: async (id: number, role: Role, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateRole', 'id', id)
            // verify required parameter 'role' is not null or undefined
            assertParamExists('updateRole', 'role', role)
            const localVarPath = `/api/admin/authorization/roles/updateRole/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(role, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {UserProjection} userProjection 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser: async (id: number, userProjection: UserProjection, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateUser', 'id', id)
            // verify required parameter 'userProjection' is not null or undefined
            assertParamExists('updateUser', 'userProjection', userProjection)
            const localVarPath = `/api/admin/users/updateUser/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userProjection, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AdminApi - functional programming interface
 * @export
 */
export const AdminApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AdminApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {Role} role 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createRole(role: Role, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createRole(role, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.createRole']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {NewUserRequest} newUserRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUser(newUserRequest: NewUserRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createUser(newUserRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.createUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsers(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserProjection>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsers(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.getUsers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {Role} role 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateRole(id: number, role: Role, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateRole(id, role, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.updateRole']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {UserProjection} userProjection 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUser(id: number, userProjection: UserProjection, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUser(id, userProjection, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.updateUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AdminApi - factory interface
 * @export
 */
export const AdminApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AdminApiFp(configuration)
    return {
        /**
         * 
         * @param {Role} role 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRole(role: Role, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.createRole(role, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NewUserRequest} newUserRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser(newUserRequest: NewUserRequest, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.createUser(newUserRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers(options?: RawAxiosRequestConfig): AxiosPromise<Array<UserProjection>> {
            return localVarFp.getUsers(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {Role} role 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRole(id: number, role: Role, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.updateRole(id, role, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {UserProjection} userProjection 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser(id: number, userProjection: UserProjection, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.updateUser(id, userProjection, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AdminApi - object-oriented interface
 * @export
 * @class AdminApi
 * @extends {BaseAPI}
 */
export class AdminApi extends BaseAPI {
    /**
     * 
     * @param {Role} role 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public createRole(role: Role, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).createRole(role, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NewUserRequest} newUserRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public createUser(newUserRequest: NewUserRequest, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).createUser(newUserRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public getUsers(options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).getUsers(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {Role} role 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public updateRole(id: number, role: Role, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).updateRole(id, role, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {UserProjection} userProjection 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public updateUser(id: number, userProjection: UserProjection, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).updateUser(id, userProjection, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * AssignmentsApi - axios parameter creator
 * @export
 */
export const AssignmentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {Array<AssignmentQuestionRequest>} assignmentQuestionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkUpdateQuestions: async (assignmentQuestionRequest: Array<AssignmentQuestionRequest>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'assignmentQuestionRequest' is not null or undefined
            assertParamExists('bulkUpdateQuestions', 'assignmentQuestionRequest', assignmentQuestionRequest)
            const localVarPath = `/api/assignments/questions/bulk-update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(assignmentQuestionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Assignment} assignment 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssignment1: async (assignment: Assignment, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'assignment' is not null or undefined
            assertParamExists('createAssignment1', 'assignment', assignment)
            const localVarPath = `/api/assignments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(assignment, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {AssignmentQuestionRequest} assignmentQuestionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createQuestion: async (assignmentQuestionRequest: AssignmentQuestionRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'assignmentQuestionRequest' is not null or undefined
            assertParamExists('createQuestion', 'assignmentQuestionRequest', assignmentQuestionRequest)
            const localVarPath = `/api/assignments/questions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(assignmentQuestionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssignment: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteAssignment', 'id', id)
            const localVarPath = `/api/assignments/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteQuestion: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteQuestion', 'id', id)
            const localVarPath = `/api/assignments/questions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} fileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadFile: async (fileId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileId' is not null or undefined
            assertParamExists('downloadFile', 'fileId', fileId)
            const localVarPath = `/api/assignments/files/{fileId}`
                .replace(`{${"fileId"}}`, encodeURIComponent(String(fileId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllAssignments: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/assignments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllQuestions: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/assignments/questions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} assignmentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssignmentAttempt: async (assignmentId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'assignmentId' is not null or undefined
            assertParamExists('getAssignmentAttempt', 'assignmentId', assignmentId)
            const localVarPath = `/api/assignments/attempts/get-assignment-attempt`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (assignmentId !== undefined) {
                localVarQueryParameter['assignmentId'] = assignmentId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} assignmentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssignmentAttemptAnswers: async (assignmentId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'assignmentId' is not null or undefined
            assertParamExists('getAssignmentAttemptAnswers', 'assignmentId', assignmentId)
            const localVarPath = `/api/assignments/attempts/get-assignment-attempt-answers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (assignmentId !== undefined) {
                localVarQueryParameter['assignmentId'] = assignmentId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} assignmentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssignmentAttemptsForUserById: async (assignmentId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'assignmentId' is not null or undefined
            assertParamExists('getAssignmentAttemptsForUserById', 'assignmentId', assignmentId)
            const localVarPath = `/api/assignments/attempts/client`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (assignmentId !== undefined) {
                localVarQueryParameter['assignmentId'] = assignmentId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssignmentById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getAssignmentById', 'id', id)
            const localVarPath = `/api/assignments/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} assignmentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssignmentDetails: async (assignmentId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'assignmentId' is not null or undefined
            assertParamExists('getAssignmentDetails', 'assignmentId', assignmentId)
            const localVarPath = `/api/assignments/getAssignmentDetails`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (assignmentId !== undefined) {
                localVarQueryParameter['assignmentId'] = assignmentId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} assignmentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssignmentEditDetails: async (assignmentId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'assignmentId' is not null or undefined
            assertParamExists('getAssignmentEditDetails', 'assignmentId', assignmentId)
            const localVarPath = `/api/assignments/getAssignmentEditDetails`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (assignmentId !== undefined) {
                localVarQueryParameter['assignmentId'] = assignmentId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssignmentForAttemptById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getAssignmentForAttemptById', 'id', id)
            const localVarPath = `/api/assignments/{id}/attempt`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQuestionById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getQuestionById', 'id', id)
            const localVarPath = `/api/assignments/questions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {StartAssignmentAttemptRequest} startAssignmentAttemptRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startAttempt: async (startAssignmentAttemptRequest: StartAssignmentAttemptRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'startAssignmentAttemptRequest' is not null or undefined
            assertParamExists('startAttempt', 'startAssignmentAttemptRequest', startAssignmentAttemptRequest)
            const localVarPath = `/api/assignments/attempts/start-attempt`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(startAssignmentAttemptRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SubmitAssignmentAttemptRequest} submitAssignmentAttemptRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitCurrentAttempt: async (submitAssignmentAttemptRequest: SubmitAssignmentAttemptRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'submitAssignmentAttemptRequest' is not null or undefined
            assertParamExists('submitCurrentAttempt', 'submitAssignmentAttemptRequest', submitAssignmentAttemptRequest)
            const localVarPath = `/api/assignments/attempts/submit-attempt`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(submitAssignmentAttemptRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {Assignment} assignment 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAssignment: async (id: number, assignment: Assignment, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateAssignment', 'id', id)
            // verify required parameter 'assignment' is not null or undefined
            assertParamExists('updateAssignment', 'assignment', assignment)
            const localVarPath = `/api/assignments/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(assignment, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {AssignmentQuestionRequest} assignmentQuestionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateQuestion: async (id: number, assignmentQuestionRequest: AssignmentQuestionRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateQuestion', 'id', id)
            // verify required parameter 'assignmentQuestionRequest' is not null or undefined
            assertParamExists('updateQuestion', 'assignmentQuestionRequest', assignmentQuestionRequest)
            const localVarPath = `/api/assignments/questions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(assignmentQuestionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {AssignmentQuestionUpdateRequest} assignmentQuestionUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateQuestionAnswer: async (assignmentQuestionUpdateRequest: AssignmentQuestionUpdateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'assignmentQuestionUpdateRequest' is not null or undefined
            assertParamExists('updateQuestionAnswer', 'assignmentQuestionUpdateRequest', assignmentQuestionUpdateRequest)
            const localVarPath = `/api/assignments/attempts/update-question-attempt`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(assignmentQuestionUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadFile: async (id: number, file: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('uploadFile', 'id', id)
            // verify required parameter 'file' is not null or undefined
            assertParamExists('uploadFile', 'file', file)
            const localVarPath = `/api/assignments/{id}/files`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (file !== undefined) {
                localVarQueryParameter['file'] = file;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AssignmentsApi - functional programming interface
 * @export
 */
export const AssignmentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AssignmentsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {Array<AssignmentQuestionRequest>} assignmentQuestionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bulkUpdateQuestions(assignmentQuestionRequest: Array<AssignmentQuestionRequest>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AssignmentQuestion>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bulkUpdateQuestions(assignmentQuestionRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AssignmentsApi.bulkUpdateQuestions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {Assignment} assignment 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAssignment1(assignment: Assignment, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Assignment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAssignment1(assignment, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AssignmentsApi.createAssignment1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {AssignmentQuestionRequest} assignmentQuestionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createQuestion(assignmentQuestionRequest: AssignmentQuestionRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssignmentQuestion>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createQuestion(assignmentQuestionRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AssignmentsApi.createQuestion']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAssignment(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAssignment(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AssignmentsApi.deleteAssignment']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteQuestion(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteQuestion(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AssignmentsApi.deleteQuestion']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} fileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async downloadFile(fileId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.downloadFile(fileId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AssignmentsApi.downloadFile']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllAssignments(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AssignmentDetailsProjection>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllAssignments(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AssignmentsApi.getAllAssignments']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllQuestions(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AssignmentQuestion>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllQuestions(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AssignmentsApi.getAllQuestions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} assignmentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAssignmentAttempt(assignmentId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAssignmentAttempt(assignmentId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AssignmentsApi.getAssignmentAttempt']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} assignmentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAssignmentAttemptAnswers(assignmentId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAssignmentAttemptAnswers(assignmentId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AssignmentsApi.getAssignmentAttemptAnswers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} assignmentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAssignmentAttemptsForUserById(assignmentId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AssignmentAttemptProjection>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAssignmentAttemptsForUserById(assignmentId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AssignmentsApi.getAssignmentAttemptsForUserById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAssignmentById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssignmentDetailsProjection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAssignmentById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AssignmentsApi.getAssignmentById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} assignmentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAssignmentDetails(assignmentId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssignmentDetailsProjection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAssignmentDetails(assignmentId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AssignmentsApi.getAssignmentDetails']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} assignmentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAssignmentEditDetails(assignmentId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssignmentEditDetailsProjection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAssignmentEditDetails(assignmentId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AssignmentsApi.getAssignmentEditDetails']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAssignmentForAttemptById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssignmentProjection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAssignmentForAttemptById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AssignmentsApi.getAssignmentForAttemptById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getQuestionById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssignmentQuestion>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getQuestionById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AssignmentsApi.getQuestionById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {StartAssignmentAttemptRequest} startAssignmentAttemptRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async startAttempt(startAssignmentAttemptRequest: StartAssignmentAttemptRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.startAttempt(startAssignmentAttemptRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AssignmentsApi.startAttempt']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {SubmitAssignmentAttemptRequest} submitAssignmentAttemptRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async submitCurrentAttempt(submitAssignmentAttemptRequest: SubmitAssignmentAttemptRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.submitCurrentAttempt(submitAssignmentAttemptRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AssignmentsApi.submitCurrentAttempt']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {Assignment} assignment 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAssignment(id: number, assignment: Assignment, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Assignment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAssignment(id, assignment, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AssignmentsApi.updateAssignment']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {AssignmentQuestionRequest} assignmentQuestionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateQuestion(id: number, assignmentQuestionRequest: AssignmentQuestionRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssignmentQuestion>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateQuestion(id, assignmentQuestionRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AssignmentsApi.updateQuestion']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {AssignmentQuestionUpdateRequest} assignmentQuestionUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateQuestionAnswer(assignmentQuestionUpdateRequest: AssignmentQuestionUpdateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateQuestionAnswer(assignmentQuestionUpdateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AssignmentsApi.updateQuestionAnswer']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadFile(id: number, file: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadFile(id, file, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AssignmentsApi.uploadFile']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AssignmentsApi - factory interface
 * @export
 */
export const AssignmentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AssignmentsApiFp(configuration)
    return {
        /**
         * 
         * @param {Array<AssignmentQuestionRequest>} assignmentQuestionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkUpdateQuestions(assignmentQuestionRequest: Array<AssignmentQuestionRequest>, options?: RawAxiosRequestConfig): AxiosPromise<Array<AssignmentQuestion>> {
            return localVarFp.bulkUpdateQuestions(assignmentQuestionRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Assignment} assignment 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssignment1(assignment: Assignment, options?: RawAxiosRequestConfig): AxiosPromise<Assignment> {
            return localVarFp.createAssignment1(assignment, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AssignmentQuestionRequest} assignmentQuestionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createQuestion(assignmentQuestionRequest: AssignmentQuestionRequest, options?: RawAxiosRequestConfig): AxiosPromise<AssignmentQuestion> {
            return localVarFp.createQuestion(assignmentQuestionRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssignment(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteAssignment(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteQuestion(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteQuestion(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} fileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadFile(fileId: string, options?: RawAxiosRequestConfig): AxiosPromise<File> {
            return localVarFp.downloadFile(fileId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllAssignments(options?: RawAxiosRequestConfig): AxiosPromise<Array<AssignmentDetailsProjection>> {
            return localVarFp.getAllAssignments(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllQuestions(options?: RawAxiosRequestConfig): AxiosPromise<Array<AssignmentQuestion>> {
            return localVarFp.getAllQuestions(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} assignmentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssignmentAttempt(assignmentId: number, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getAssignmentAttempt(assignmentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} assignmentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssignmentAttemptAnswers(assignmentId: number, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getAssignmentAttemptAnswers(assignmentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} assignmentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssignmentAttemptsForUserById(assignmentId: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<AssignmentAttemptProjection>> {
            return localVarFp.getAssignmentAttemptsForUserById(assignmentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssignmentById(id: number, options?: RawAxiosRequestConfig): AxiosPromise<AssignmentDetailsProjection> {
            return localVarFp.getAssignmentById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} assignmentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssignmentDetails(assignmentId: number, options?: RawAxiosRequestConfig): AxiosPromise<AssignmentDetailsProjection> {
            return localVarFp.getAssignmentDetails(assignmentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} assignmentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssignmentEditDetails(assignmentId: number, options?: RawAxiosRequestConfig): AxiosPromise<AssignmentEditDetailsProjection> {
            return localVarFp.getAssignmentEditDetails(assignmentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssignmentForAttemptById(id: number, options?: RawAxiosRequestConfig): AxiosPromise<AssignmentProjection> {
            return localVarFp.getAssignmentForAttemptById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQuestionById(id: number, options?: RawAxiosRequestConfig): AxiosPromise<AssignmentQuestion> {
            return localVarFp.getQuestionById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {StartAssignmentAttemptRequest} startAssignmentAttemptRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startAttempt(startAssignmentAttemptRequest: StartAssignmentAttemptRequest, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.startAttempt(startAssignmentAttemptRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SubmitAssignmentAttemptRequest} submitAssignmentAttemptRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitCurrentAttempt(submitAssignmentAttemptRequest: SubmitAssignmentAttemptRequest, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.submitCurrentAttempt(submitAssignmentAttemptRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {Assignment} assignment 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAssignment(id: number, assignment: Assignment, options?: RawAxiosRequestConfig): AxiosPromise<Assignment> {
            return localVarFp.updateAssignment(id, assignment, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {AssignmentQuestionRequest} assignmentQuestionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateQuestion(id: number, assignmentQuestionRequest: AssignmentQuestionRequest, options?: RawAxiosRequestConfig): AxiosPromise<AssignmentQuestion> {
            return localVarFp.updateQuestion(id, assignmentQuestionRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AssignmentQuestionUpdateRequest} assignmentQuestionUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateQuestionAnswer(assignmentQuestionUpdateRequest: AssignmentQuestionUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.updateQuestionAnswer(assignmentQuestionUpdateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadFile(id: number, file: File, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.uploadFile(id, file, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AssignmentsApi - object-oriented interface
 * @export
 * @class AssignmentsApi
 * @extends {BaseAPI}
 */
export class AssignmentsApi extends BaseAPI {
    /**
     * 
     * @param {Array<AssignmentQuestionRequest>} assignmentQuestionRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssignmentsApi
     */
    public bulkUpdateQuestions(assignmentQuestionRequest: Array<AssignmentQuestionRequest>, options?: RawAxiosRequestConfig) {
        return AssignmentsApiFp(this.configuration).bulkUpdateQuestions(assignmentQuestionRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Assignment} assignment 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssignmentsApi
     */
    public createAssignment1(assignment: Assignment, options?: RawAxiosRequestConfig) {
        return AssignmentsApiFp(this.configuration).createAssignment1(assignment, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AssignmentQuestionRequest} assignmentQuestionRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssignmentsApi
     */
    public createQuestion(assignmentQuestionRequest: AssignmentQuestionRequest, options?: RawAxiosRequestConfig) {
        return AssignmentsApiFp(this.configuration).createQuestion(assignmentQuestionRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssignmentsApi
     */
    public deleteAssignment(id: number, options?: RawAxiosRequestConfig) {
        return AssignmentsApiFp(this.configuration).deleteAssignment(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssignmentsApi
     */
    public deleteQuestion(id: number, options?: RawAxiosRequestConfig) {
        return AssignmentsApiFp(this.configuration).deleteQuestion(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} fileId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssignmentsApi
     */
    public downloadFile(fileId: string, options?: RawAxiosRequestConfig) {
        return AssignmentsApiFp(this.configuration).downloadFile(fileId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssignmentsApi
     */
    public getAllAssignments(options?: RawAxiosRequestConfig) {
        return AssignmentsApiFp(this.configuration).getAllAssignments(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssignmentsApi
     */
    public getAllQuestions(options?: RawAxiosRequestConfig) {
        return AssignmentsApiFp(this.configuration).getAllQuestions(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} assignmentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssignmentsApi
     */
    public getAssignmentAttempt(assignmentId: number, options?: RawAxiosRequestConfig) {
        return AssignmentsApiFp(this.configuration).getAssignmentAttempt(assignmentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} assignmentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssignmentsApi
     */
    public getAssignmentAttemptAnswers(assignmentId: number, options?: RawAxiosRequestConfig) {
        return AssignmentsApiFp(this.configuration).getAssignmentAttemptAnswers(assignmentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} assignmentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssignmentsApi
     */
    public getAssignmentAttemptsForUserById(assignmentId: number, options?: RawAxiosRequestConfig) {
        return AssignmentsApiFp(this.configuration).getAssignmentAttemptsForUserById(assignmentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssignmentsApi
     */
    public getAssignmentById(id: number, options?: RawAxiosRequestConfig) {
        return AssignmentsApiFp(this.configuration).getAssignmentById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} assignmentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssignmentsApi
     */
    public getAssignmentDetails(assignmentId: number, options?: RawAxiosRequestConfig) {
        return AssignmentsApiFp(this.configuration).getAssignmentDetails(assignmentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} assignmentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssignmentsApi
     */
    public getAssignmentEditDetails(assignmentId: number, options?: RawAxiosRequestConfig) {
        return AssignmentsApiFp(this.configuration).getAssignmentEditDetails(assignmentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssignmentsApi
     */
    public getAssignmentForAttemptById(id: number, options?: RawAxiosRequestConfig) {
        return AssignmentsApiFp(this.configuration).getAssignmentForAttemptById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssignmentsApi
     */
    public getQuestionById(id: number, options?: RawAxiosRequestConfig) {
        return AssignmentsApiFp(this.configuration).getQuestionById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {StartAssignmentAttemptRequest} startAssignmentAttemptRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssignmentsApi
     */
    public startAttempt(startAssignmentAttemptRequest: StartAssignmentAttemptRequest, options?: RawAxiosRequestConfig) {
        return AssignmentsApiFp(this.configuration).startAttempt(startAssignmentAttemptRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SubmitAssignmentAttemptRequest} submitAssignmentAttemptRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssignmentsApi
     */
    public submitCurrentAttempt(submitAssignmentAttemptRequest: SubmitAssignmentAttemptRequest, options?: RawAxiosRequestConfig) {
        return AssignmentsApiFp(this.configuration).submitCurrentAttempt(submitAssignmentAttemptRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {Assignment} assignment 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssignmentsApi
     */
    public updateAssignment(id: number, assignment: Assignment, options?: RawAxiosRequestConfig) {
        return AssignmentsApiFp(this.configuration).updateAssignment(id, assignment, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {AssignmentQuestionRequest} assignmentQuestionRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssignmentsApi
     */
    public updateQuestion(id: number, assignmentQuestionRequest: AssignmentQuestionRequest, options?: RawAxiosRequestConfig) {
        return AssignmentsApiFp(this.configuration).updateQuestion(id, assignmentQuestionRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AssignmentQuestionUpdateRequest} assignmentQuestionUpdateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssignmentsApi
     */
    public updateQuestionAnswer(assignmentQuestionUpdateRequest: AssignmentQuestionUpdateRequest, options?: RawAxiosRequestConfig) {
        return AssignmentsApiFp(this.configuration).updateQuestionAnswer(assignmentQuestionUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {File} file 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssignmentsApi
     */
    public uploadFile(id: number, file: File, options?: RawAxiosRequestConfig) {
        return AssignmentsApiFp(this.configuration).uploadFile(id, file, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * AuthenticationApi - axios parameter creator
 * @export
 */
export const AuthenticationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {LoginRequestDTO} loginRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginUserV1: async (loginRequestDTO: LoginRequestDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginRequestDTO' is not null or undefined
            assertParamExists('loginUserV1', 'loginRequestDTO', loginRequestDTO)
            const localVarPath = `/api/v1/authentication/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginRequestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/auth/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RegistrationDTO} registrationDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerUserV1: async (registrationDTO: RegistrationDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'registrationDTO' is not null or undefined
            assertParamExists('registerUserV1', 'registrationDTO', registrationDTO)
            const localVarPath = `/api/v1/authentication/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registrationDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthenticationApi - functional programming interface
 * @export
 */
export const AuthenticationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthenticationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {LoginRequestDTO} loginRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginUserV1(loginRequestDTO: LoginRequestDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.loginUserV1(loginRequestDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthenticationApi.loginUserV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logout(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logout(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthenticationApi.logout']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {RegistrationDTO} registrationDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registerUserV1(registrationDTO: RegistrationDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registerUserV1(registrationDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthenticationApi.registerUserV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthenticationApi - factory interface
 * @export
 */
export const AuthenticationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthenticationApiFp(configuration)
    return {
        /**
         * 
         * @param {LoginRequestDTO} loginRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginUserV1(loginRequestDTO: LoginRequestDTO, options?: RawAxiosRequestConfig): AxiosPromise<LoginResponseDTO> {
            return localVarFp.loginUserV1(loginRequestDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout(options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.logout(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RegistrationDTO} registrationDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerUserV1(registrationDTO: RegistrationDTO, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.registerUserV1(registrationDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthenticationApi - object-oriented interface
 * @export
 * @class AuthenticationApi
 * @extends {BaseAPI}
 */
export class AuthenticationApi extends BaseAPI {
    /**
     * 
     * @param {LoginRequestDTO} loginRequestDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public loginUserV1(loginRequestDTO: LoginRequestDTO, options?: RawAxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).loginUserV1(loginRequestDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public logout(options?: RawAxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).logout(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RegistrationDTO} registrationDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public registerUserV1(registrationDTO: RegistrationDTO, options?: RawAxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).registerUserV1(registrationDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * AuthorizationApi - axios parameter creator
 * @export
 */
export const AuthorizationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPermissions: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/authorization/permissions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} permissionId The ID of the permission to fetch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPermission: async (permissionId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'permissionId' is not null or undefined
            assertParamExists('getPermission', 'permissionId', permissionId)
            const localVarPath = `/api/authorization/permissions/{permissionId}`
                .replace(`{${"permissionId"}}`, encodeURIComponent(String(permissionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} roleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRole: async (roleId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'roleId' is not null or undefined
            assertParamExists('getRole', 'roleId', roleId)
            const localVarPath = `/api/authorization/roles/{roleId}`
                .replace(`{${"roleId"}}`, encodeURIComponent(String(roleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} roleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRolePermissions: async (roleId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'roleId' is not null or undefined
            assertParamExists('getRolePermissions', 'roleId', roleId)
            const localVarPath = `/api/authorization/roles/{roleId}/permissions`
                .replace(`{${"roleId"}}`, encodeURIComponent(String(roleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoles: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/authorization/roles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthorizationApi - functional programming interface
 * @export
 */
export const AuthorizationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthorizationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllPermissions(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Permission>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllPermissions(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthorizationApi.getAllPermissions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} permissionId The ID of the permission to fetch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPermission(permissionId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Permission>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPermission(permissionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthorizationApi.getPermission']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} roleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRole(roleId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Role>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRole(roleId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthorizationApi.getRole']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} roleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRolePermissions(roleId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Permission>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRolePermissions(roleId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthorizationApi.getRolePermissions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRoles(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Role>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRoles(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthorizationApi.getRoles']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthorizationApi - factory interface
 * @export
 */
export const AuthorizationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthorizationApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPermissions(options?: RawAxiosRequestConfig): AxiosPromise<Array<Permission>> {
            return localVarFp.getAllPermissions(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} permissionId The ID of the permission to fetch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPermission(permissionId: number, options?: RawAxiosRequestConfig): AxiosPromise<Permission> {
            return localVarFp.getPermission(permissionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} roleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRole(roleId: number, options?: RawAxiosRequestConfig): AxiosPromise<Role> {
            return localVarFp.getRole(roleId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} roleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRolePermissions(roleId: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<Permission>> {
            return localVarFp.getRolePermissions(roleId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoles(options?: RawAxiosRequestConfig): AxiosPromise<Array<Role>> {
            return localVarFp.getRoles(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthorizationApi - object-oriented interface
 * @export
 * @class AuthorizationApi
 * @extends {BaseAPI}
 */
export class AuthorizationApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorizationApi
     */
    public getAllPermissions(options?: RawAxiosRequestConfig) {
        return AuthorizationApiFp(this.configuration).getAllPermissions(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} permissionId The ID of the permission to fetch
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorizationApi
     */
    public getPermission(permissionId: number, options?: RawAxiosRequestConfig) {
        return AuthorizationApiFp(this.configuration).getPermission(permissionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} roleId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorizationApi
     */
    public getRole(roleId: number, options?: RawAxiosRequestConfig) {
        return AuthorizationApiFp(this.configuration).getRole(roleId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} roleId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorizationApi
     */
    public getRolePermissions(roleId: number, options?: RawAxiosRequestConfig) {
        return AuthorizationApiFp(this.configuration).getRolePermissions(roleId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorizationApi
     */
    public getRoles(options?: RawAxiosRequestConfig) {
        return AuthorizationApiFp(this.configuration).getRoles(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CourseApi - axios parameter creator
 * @export
 */
export const CourseApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} courseId 
         * @param {Array<number>} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMembers: async (courseId: number, requestBody: Array<number>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'courseId' is not null or undefined
            assertParamExists('addMembers', 'courseId', courseId)
            // verify required parameter 'requestBody' is not null or undefined
            assertParamExists('addMembers', 'requestBody', requestBody)
            const localVarPath = `/api/courses/{courseId}/members`
                .replace(`{${"courseId"}}`, encodeURIComponent(String(courseId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} courseId 
         * @param {Assignment} assignment 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssignment: async (courseId: number, assignment: Assignment, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'courseId' is not null or undefined
            assertParamExists('createAssignment', 'courseId', courseId)
            // verify required parameter 'assignment' is not null or undefined
            assertParamExists('createAssignment', 'assignment', assignment)
            const localVarPath = `/api/courses/{courseId}/assignments/create`
                .replace(`{${"courseId"}}`, encodeURIComponent(String(courseId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(assignment, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CourseCreationDto} courseCreationDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCourse: async (courseCreationDto: CourseCreationDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'courseCreationDto' is not null or undefined
            assertParamExists('createCourse', 'courseCreationDto', courseCreationDto)
            const localVarPath = `/api/courses`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(courseCreationDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} courseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCourse: async (courseId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'courseId' is not null or undefined
            assertParamExists('deleteCourse', 'courseId', courseId)
            const localVarPath = `/api/courses/{courseId}`
                .replace(`{${"courseId"}}`, encodeURIComponent(String(courseId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} courseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCourseAssignments: async (courseId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'courseId' is not null or undefined
            assertParamExists('getCourseAssignments', 'courseId', courseId)
            const localVarPath = `/api/courses/{courseId}/assignments`
                .replace(`{${"courseId"}}`, encodeURIComponent(String(courseId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} courseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCourseAssignments2: async (courseId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'courseId' is not null or undefined
            assertParamExists('getCourseAssignments2', 'courseId', courseId)
            const localVarPath = `/api/courses/getAllAssignmentsDetails`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (courseId !== undefined) {
                localVarQueryParameter['courseId'] = courseId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} assignmentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCourseFromAssignment: async (assignmentId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'assignmentId' is not null or undefined
            assertParamExists('getCourseFromAssignment', 'assignmentId', assignmentId)
            const localVarPath = `/api/courses/getCourseFromAssignment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (assignmentId !== undefined) {
                localVarQueryParameter['assignmentId'] = assignmentId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} courseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCourseMembers: async (courseId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'courseId' is not null or undefined
            assertParamExists('getCourseMembers', 'courseId', courseId)
            const localVarPath = `/api/courses/{courseId}/members`
                .replace(`{${"courseId"}}`, encodeURIComponent(String(courseId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCourses: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/courses`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyCourses: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/courses/getMyCourses`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} courseId 
         * @param {Array<number>} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeMembers: async (courseId: number, requestBody: Array<number>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'courseId' is not null or undefined
            assertParamExists('removeMembers', 'courseId', courseId)
            // verify required parameter 'requestBody' is not null or undefined
            assertParamExists('removeMembers', 'requestBody', requestBody)
            const localVarPath = `/api/courses/{courseId}/members/removeBulkMembers`
                .replace(`{${"courseId"}}`, encodeURIComponent(String(courseId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} courseId 
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCourse: async (courseId: number, name?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'courseId' is not null or undefined
            assertParamExists('updateCourse', 'courseId', courseId)
            const localVarPath = `/api/courses/{courseId}`
                .replace(`{${"courseId"}}`, encodeURIComponent(String(courseId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CourseApi - functional programming interface
 * @export
 */
export const CourseApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CourseApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} courseId 
         * @param {Array<number>} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addMembers(courseId: number, requestBody: Array<number>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addMembers(courseId, requestBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseApi.addMembers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} courseId 
         * @param {Assignment} assignment 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAssignment(courseId: number, assignment: Assignment, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAssignment(courseId, assignment, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseApi.createAssignment']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CourseCreationDto} courseCreationDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCourse(courseCreationDto: CourseCreationDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCourse(courseCreationDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseApi.createCourse']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} courseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCourse(courseId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCourse(courseId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseApi.deleteCourse']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} courseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCourseAssignments(courseId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Assignment>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCourseAssignments(courseId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseApi.getCourseAssignments']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} courseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCourseAssignments2(courseId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AssignmentDetailsProjection>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCourseAssignments2(courseId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseApi.getCourseAssignments2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} assignmentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCourseFromAssignment(assignmentId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Course>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCourseFromAssignment(assignmentId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseApi.getCourseFromAssignment']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} courseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCourseMembers(courseId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<User>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCourseMembers(courseId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseApi.getCourseMembers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCourses(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CourseDetailsProjection>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCourses(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseApi.getCourses']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMyCourses(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CourseDetailsProjection>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMyCourses(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseApi.getMyCourses']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} courseId 
         * @param {Array<number>} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeMembers(courseId: number, requestBody: Array<number>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeMembers(courseId, requestBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseApi.removeMembers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} courseId 
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCourse(courseId: number, name?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCourse(courseId, name, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseApi.updateCourse']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CourseApi - factory interface
 * @export
 */
export const CourseApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CourseApiFp(configuration)
    return {
        /**
         * 
         * @param {number} courseId 
         * @param {Array<number>} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMembers(courseId: number, requestBody: Array<number>, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.addMembers(courseId, requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} courseId 
         * @param {Assignment} assignment 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssignment(courseId: number, assignment: Assignment, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.createAssignment(courseId, assignment, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CourseCreationDto} courseCreationDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCourse(courseCreationDto: CourseCreationDto, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.createCourse(courseCreationDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} courseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCourse(courseId: number, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.deleteCourse(courseId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} courseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCourseAssignments(courseId: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<Assignment>> {
            return localVarFp.getCourseAssignments(courseId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} courseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCourseAssignments2(courseId: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<AssignmentDetailsProjection>> {
            return localVarFp.getCourseAssignments2(courseId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} assignmentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCourseFromAssignment(assignmentId: number, options?: RawAxiosRequestConfig): AxiosPromise<Course> {
            return localVarFp.getCourseFromAssignment(assignmentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} courseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCourseMembers(courseId: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<User>> {
            return localVarFp.getCourseMembers(courseId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCourses(options?: RawAxiosRequestConfig): AxiosPromise<Array<CourseDetailsProjection>> {
            return localVarFp.getCourses(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyCourses(options?: RawAxiosRequestConfig): AxiosPromise<Array<CourseDetailsProjection>> {
            return localVarFp.getMyCourses(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} courseId 
         * @param {Array<number>} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeMembers(courseId: number, requestBody: Array<number>, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.removeMembers(courseId, requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} courseId 
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCourse(courseId: number, name?: string, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.updateCourse(courseId, name, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CourseApi - object-oriented interface
 * @export
 * @class CourseApi
 * @extends {BaseAPI}
 */
export class CourseApi extends BaseAPI {
    /**
     * 
     * @param {number} courseId 
     * @param {Array<number>} requestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseApi
     */
    public addMembers(courseId: number, requestBody: Array<number>, options?: RawAxiosRequestConfig) {
        return CourseApiFp(this.configuration).addMembers(courseId, requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} courseId 
     * @param {Assignment} assignment 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseApi
     */
    public createAssignment(courseId: number, assignment: Assignment, options?: RawAxiosRequestConfig) {
        return CourseApiFp(this.configuration).createAssignment(courseId, assignment, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CourseCreationDto} courseCreationDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseApi
     */
    public createCourse(courseCreationDto: CourseCreationDto, options?: RawAxiosRequestConfig) {
        return CourseApiFp(this.configuration).createCourse(courseCreationDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} courseId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseApi
     */
    public deleteCourse(courseId: number, options?: RawAxiosRequestConfig) {
        return CourseApiFp(this.configuration).deleteCourse(courseId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} courseId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseApi
     */
    public getCourseAssignments(courseId: number, options?: RawAxiosRequestConfig) {
        return CourseApiFp(this.configuration).getCourseAssignments(courseId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} courseId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseApi
     */
    public getCourseAssignments2(courseId: number, options?: RawAxiosRequestConfig) {
        return CourseApiFp(this.configuration).getCourseAssignments2(courseId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} assignmentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseApi
     */
    public getCourseFromAssignment(assignmentId: number, options?: RawAxiosRequestConfig) {
        return CourseApiFp(this.configuration).getCourseFromAssignment(assignmentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} courseId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseApi
     */
    public getCourseMembers(courseId: number, options?: RawAxiosRequestConfig) {
        return CourseApiFp(this.configuration).getCourseMembers(courseId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseApi
     */
    public getCourses(options?: RawAxiosRequestConfig) {
        return CourseApiFp(this.configuration).getCourses(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseApi
     */
    public getMyCourses(options?: RawAxiosRequestConfig) {
        return CourseApiFp(this.configuration).getMyCourses(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} courseId 
     * @param {Array<number>} requestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseApi
     */
    public removeMembers(courseId: number, requestBody: Array<number>, options?: RawAxiosRequestConfig) {
        return CourseApiFp(this.configuration).removeMembers(courseId, requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} courseId 
     * @param {string} [name] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseApi
     */
    public updateCourse(courseId: number, name?: string, options?: RawAxiosRequestConfig) {
        return CourseApiFp(this.configuration).updateCourse(courseId, name, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * QuestionBankApi - axios parameter creator
 * @export
 */
export const QuestionBankApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {QuestionBankCategory} questionBankCategory 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCategory: async (questionBankCategory: QuestionBankCategory, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'questionBankCategory' is not null or undefined
            assertParamExists('addCategory', 'questionBankCategory', questionBankCategory)
            const localVarPath = `/api/questionBank/categories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(questionBankCategory, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {QuestionBankCategory} questionBankCategory 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCategory1: async (questionBankCategory: QuestionBankCategory, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'questionBankCategory' is not null or undefined
            assertParamExists('addCategory1', 'questionBankCategory', questionBankCategory)
            const localVarPath = `/api/questionBank/categories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(questionBankCategory, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {QuestionBankQuestion} questionBankQuestion 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addQuestion: async (questionBankQuestion: QuestionBankQuestion, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'questionBankQuestion' is not null or undefined
            assertParamExists('addQuestion', 'questionBankQuestion', questionBankQuestion)
            const localVarPath = `/api/questionBank/questions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(questionBankQuestion, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {QuestionBankQuestion} questionBankQuestion 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addQuestion1: async (questionBankQuestion: QuestionBankQuestion, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'questionBankQuestion' is not null or undefined
            assertParamExists('addQuestion1', 'questionBankQuestion', questionBankQuestion)
            const localVarPath = `/api/questionBank/questions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(questionBankQuestion, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategories: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/questionBank/categories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQuestions: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/questionBank/questions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * QuestionBankApi - functional programming interface
 * @export
 */
export const QuestionBankApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = QuestionBankApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {QuestionBankCategory} questionBankCategory 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addCategory(questionBankCategory: QuestionBankCategory, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QuestionBankCategory>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addCategory(questionBankCategory, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['QuestionBankApi.addCategory']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {QuestionBankCategory} questionBankCategory 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addCategory1(questionBankCategory: QuestionBankCategory, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QuestionBankCategory>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addCategory1(questionBankCategory, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['QuestionBankApi.addCategory1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {QuestionBankQuestion} questionBankQuestion 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addQuestion(questionBankQuestion: QuestionBankQuestion, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QuestionBankQuestion>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addQuestion(questionBankQuestion, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['QuestionBankApi.addQuestion']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {QuestionBankQuestion} questionBankQuestion 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addQuestion1(questionBankQuestion: QuestionBankQuestion, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QuestionBankQuestion>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addQuestion1(questionBankQuestion, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['QuestionBankApi.addQuestion1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCategories(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<QuestionBankCategory>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCategories(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['QuestionBankApi.getCategories']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getQuestions(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<QuestionBankQuestion>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getQuestions(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['QuestionBankApi.getQuestions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * QuestionBankApi - factory interface
 * @export
 */
export const QuestionBankApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = QuestionBankApiFp(configuration)
    return {
        /**
         * 
         * @param {QuestionBankCategory} questionBankCategory 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCategory(questionBankCategory: QuestionBankCategory, options?: RawAxiosRequestConfig): AxiosPromise<QuestionBankCategory> {
            return localVarFp.addCategory(questionBankCategory, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {QuestionBankCategory} questionBankCategory 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCategory1(questionBankCategory: QuestionBankCategory, options?: RawAxiosRequestConfig): AxiosPromise<QuestionBankCategory> {
            return localVarFp.addCategory1(questionBankCategory, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {QuestionBankQuestion} questionBankQuestion 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addQuestion(questionBankQuestion: QuestionBankQuestion, options?: RawAxiosRequestConfig): AxiosPromise<QuestionBankQuestion> {
            return localVarFp.addQuestion(questionBankQuestion, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {QuestionBankQuestion} questionBankQuestion 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addQuestion1(questionBankQuestion: QuestionBankQuestion, options?: RawAxiosRequestConfig): AxiosPromise<QuestionBankQuestion> {
            return localVarFp.addQuestion1(questionBankQuestion, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategories(options?: RawAxiosRequestConfig): AxiosPromise<Array<QuestionBankCategory>> {
            return localVarFp.getCategories(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQuestions(options?: RawAxiosRequestConfig): AxiosPromise<Array<QuestionBankQuestion>> {
            return localVarFp.getQuestions(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * QuestionBankApi - object-oriented interface
 * @export
 * @class QuestionBankApi
 * @extends {BaseAPI}
 */
export class QuestionBankApi extends BaseAPI {
    /**
     * 
     * @param {QuestionBankCategory} questionBankCategory 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionBankApi
     */
    public addCategory(questionBankCategory: QuestionBankCategory, options?: RawAxiosRequestConfig) {
        return QuestionBankApiFp(this.configuration).addCategory(questionBankCategory, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {QuestionBankCategory} questionBankCategory 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionBankApi
     */
    public addCategory1(questionBankCategory: QuestionBankCategory, options?: RawAxiosRequestConfig) {
        return QuestionBankApiFp(this.configuration).addCategory1(questionBankCategory, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {QuestionBankQuestion} questionBankQuestion 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionBankApi
     */
    public addQuestion(questionBankQuestion: QuestionBankQuestion, options?: RawAxiosRequestConfig) {
        return QuestionBankApiFp(this.configuration).addQuestion(questionBankQuestion, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {QuestionBankQuestion} questionBankQuestion 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionBankApi
     */
    public addQuestion1(questionBankQuestion: QuestionBankQuestion, options?: RawAxiosRequestConfig) {
        return QuestionBankApiFp(this.configuration).addQuestion1(questionBankQuestion, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionBankApi
     */
    public getCategories(options?: RawAxiosRequestConfig) {
        return QuestionBankApiFp(this.configuration).getCategories(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionBankApi
     */
    public getQuestions(options?: RawAxiosRequestConfig) {
        return QuestionBankApiFp(this.configuration).getQuestions(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * QuestionsApi - axios parameter creator
 * @export
 */
export const QuestionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {QuestionsFromYoutubeVideoRequest} questionsFromYoutubeVideoRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateQuestions: async (questionsFromYoutubeVideoRequest: QuestionsFromYoutubeVideoRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'questionsFromYoutubeVideoRequest' is not null or undefined
            assertParamExists('generateQuestions', 'questionsFromYoutubeVideoRequest', questionsFromYoutubeVideoRequest)
            const localVarPath = `/api/questions/generate-from-youtube-video`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(questionsFromYoutubeVideoRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * QuestionsApi - functional programming interface
 * @export
 */
export const QuestionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = QuestionsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {QuestionsFromYoutubeVideoRequest} questionsFromYoutubeVideoRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateQuestions(questionsFromYoutubeVideoRequest: QuestionsFromYoutubeVideoRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.generateQuestions(questionsFromYoutubeVideoRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['QuestionsApi.generateQuestions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * QuestionsApi - factory interface
 * @export
 */
export const QuestionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = QuestionsApiFp(configuration)
    return {
        /**
         * 
         * @param {QuestionsFromYoutubeVideoRequest} questionsFromYoutubeVideoRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateQuestions(questionsFromYoutubeVideoRequest: QuestionsFromYoutubeVideoRequest, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.generateQuestions(questionsFromYoutubeVideoRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * QuestionsApi - object-oriented interface
 * @export
 * @class QuestionsApi
 * @extends {BaseAPI}
 */
export class QuestionsApi extends BaseAPI {
    /**
     * 
     * @param {QuestionsFromYoutubeVideoRequest} questionsFromYoutubeVideoRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionsApi
     */
    public generateQuestions(questionsFromYoutubeVideoRequest: QuestionsFromYoutubeVideoRequest, options?: RawAxiosRequestConfig) {
        return QuestionsApiFp(this.configuration).generateQuestions(questionsFromYoutubeVideoRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteClientAvatar: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/users/client/avatar`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClient: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/users/client`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClientAvatar: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/users/client/avatar`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserByIdV1: async (userId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getUserByIdV1', 'userId', userId)
            const localVarPath = `/api/v1/users/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} page 
         * @param {number} size 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersV1: async (page: number, size: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'page' is not null or undefined
            assertParamExists('getUsersV1', 'page', page)
            // verify required parameter 'size' is not null or undefined
            assertParamExists('getUsersV1', 'size', size)
            const localVarPath = `/api/v1/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateClientAvatar: async (file: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'file' is not null or undefined
            assertParamExists('updateClientAvatar', 'file', file)
            const localVarPath = `/api/v1/users/client/avatar`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (file !== undefined) {
                localVarQueryParameter['file'] = file;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteClientAvatar(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteClientAvatar(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.deleteClientAvatar']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getClient(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserProjection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getClient(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.getClient']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getClientAvatar(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getClientAvatar(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.getClientAvatar']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserByIdV1(userId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserByIdV1(userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.getUserByIdV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} page 
         * @param {number} size 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsersV1(page: number, size: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserProjection>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsersV1(page, size, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.getUsersV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateClientAvatar(file: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateClientAvatar(file, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.updateClientAvatar']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteClientAvatar(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteClientAvatar(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClient(options?: RawAxiosRequestConfig): AxiosPromise<UserProjection> {
            return localVarFp.getClient(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClientAvatar(options?: RawAxiosRequestConfig): AxiosPromise<File> {
            return localVarFp.getClientAvatar(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserByIdV1(userId: number, options?: RawAxiosRequestConfig): AxiosPromise<User> {
            return localVarFp.getUserByIdV1(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} page 
         * @param {number} size 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersV1(page: number, size: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<UserProjection>> {
            return localVarFp.getUsersV1(page, size, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateClientAvatar(file: File, options?: RawAxiosRequestConfig): AxiosPromise<File> {
            return localVarFp.updateClientAvatar(file, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public deleteClientAvatar(options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).deleteClientAvatar(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getClient(options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).getClient(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getClientAvatar(options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).getClientAvatar(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getUserByIdV1(userId: number, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).getUserByIdV1(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} page 
     * @param {number} size 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getUsersV1(page: number, size: number, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).getUsersV1(page, size, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {File} file 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public updateClientAvatar(file: File, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).updateClientAvatar(file, options).then((request) => request(this.axios, this.basePath));
    }
}



